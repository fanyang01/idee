import logging
from typing import Dict, Any

from .base import BaseTool, ToolError, ToolResult

logger = logging.getLogger(__name__)

_TOOL_DESCRIPTION = """
Records the provided summary of the conversation so far.
- This tool should be called only once at the end of an interaction turn to condense the history for future turns, i.e., calling this tool should be your last action in a turn.
- Provide a detailed but concise summary of our conversation above. Focus on information that would be helpful for continuing the conversation, including what we did, what we're doing, which files we're working on, and what we're going to do next.
"""

class ConversationSummaryTool(BaseTool):
    """
    A tool used by the LLM agent to provide a summary of the conversation
    at the end of a turn. The agent framework handles the actual storage
    of this summary.
    """
    name: str = "save_conversation_summary"
    description: str = _TOOL_DESCRIPTION.strip()
    input_schema: Dict[str, Any] = {
        "type": "object",
        "properties": {
            "summary_text": {
                "type": "string",
                "description": "A concise summary of the conversation that just occurred.",
            }
        },
        "required": ["summary_text"],
    }

    async def run(self, summary_text: str) -> Dict[str, str]:
        """
        Acknowledges the receipt of the summary text.

        The actual saving logic happens within the agent framework after this
        tool call is processed.

        Args:
            summary_text: The summary generated by the LLM.

        Returns:
            A dictionary confirming the summary was received.
        """
        if not summary_text or not isinstance(summary_text, str):
             # This shouldn't happen if the LLM follows the schema, but good to check.
             logger.warning("RecordConversationSummaryTool received invalid or empty summary text.")
             # Raising ToolError here is appropriate as it's an issue with the input provided to the tool.
             raise ToolError("Summary text must be a non-empty string.")

        logger.info(f"Received conversation summary via tool call: {summary_text[:100]}...")
        # The agent's logic will take summary_text from the tool call arguments
        # and update its state / save it to the HistoryDB.
        # No try/except block is needed here as no external calls that might raise ToolError are made.
        return ToolResult("Summary received and will be recorded.")


